#!/usr/bin/python3
#
# SBILL version 1.5.0-RC6
#
# Query SLURM billing per job through SLURM sacct command
#
# Copyright (c) 2025, Somrath Kanoksirirath.
# All rights reserved under BSD 3-clause license.
#
# Dependencies:
# + python (>=3.1.0)  -- subprocess, math, os, sys, str.format
# + numpy  (>=1.11.0) -- Optional, only for --histogram option
# + SLURM
# --------------------------------------

# ---- START OF COMPILE-TIME SETUP -----

__version__ = '1.5.0-RC6 (23-Jan-2025)'
__HPC__ = 'XXX HPC of XXX center'

# Set up
# Requirement:
# 1) Treskey[0] = Slurm billing
# 2) Treskey[1] = Num GPU
# 3) Treskey[2] = Ram memory
Treskey = ['billing','gres/gpu','mem']  # Keywords to be captured from AllocTres in sacct

Service    = 'Service'
calService = lambda billing, elapsedraw : billing*elapsedraw/60/60/100
ServiceDecimal = 3

CPUusage    = 'CPU-core-hour'
calCPUusage = lambda ncpu, elapsedraw : ncpu*elapsedraw/60/60
CPUusageDecimal = 2

GPUusage    = 'GPU-card-hour'
calGPUusage = lambda ngpu, elapsedraw : ngpu*elapsedraw/60/60
GPUusageDecimal = 2

BillingUnit    = 'ServicePerHour'
calBillingUnit = lambda billing : billing/100
BillingUnitDecimal = 3

GLOBAL_SBILL_DEFAULT_FORMAT = ['JobID','JobName%10','Account','Partition','NCPUS','NGPUS','Elapsed','State',Service]
GLOBAL_SBILL_LONG_FORMAT    = ['JobID','JobName%10','User','Account','Partition','NNodes','NCPUS','NGPUS','AllocRAM','NodeList%24','Elapsed','State',BillingUnit,Service]

isRestricted  = True           # True = display only jobs related by associated accounts
AdminAccounts = ['admin']     # Admin account to grant special permission even when isRestricted = True
# Note:
# - 'AdminAccounts' is meaningless when 'PrivateData' is enforced in slurm.conf
# - SBILL restrict feature is provided as an additional guard on top of 'PrivateData',
#   since 'Service' is more sensitive information <--> 'billing' is hidden in SACCT AllocTres

SLURM_STARTDATE  = '2025-01-23T00:00:00'     # SACCT/Slurm accounting start date
AdminNoteMessage = 'IMPORTANT: XXX'   # Message to be displayed when --version is invoked

sacct_all_format_opts = ['Account', 'AdminComment', 'AllocCPUS', 'AllocNodes', 'AllocTRES', 'AssocID',
        'Cluster', 'Comment', 'Constraints', 'ConsumedEnergy', 'ConsumedEnergyRaw', 'Container', 'CPUTime', 'CPUTimeRAW',
        'DBIndex', 'DerivedExitCode', 'Elapsed', 'ElapsedRaw', 'Eligible', 'End', 'ExitCode', 'Flags', 'GID', 'Group',
        'JobID', 'JobIDRaw', 'JobName', 'MaxDiskRead', 'MaxDiskReadNode', 'MaxDiskReadTask',
        'NCPUS', 'NNodes', 'NodeList', 'Partition', 'Priority', 'QOS', 'QOSRAW', 'Reason',
        'ReqCPUFreq', 'ReqCPUFreqGov', 'ReqCPUFreqMax', 'ReqCPUFreqMin', 'ReqCPUS', 'ReqMem', 'ReqNodes', 'ReqTRES',
        'Reservation', 'ReservationId', 'Reserved', 'ResvCPU', 'ResvCPURAW',
        'Start', 'State', 'Submit', 'SubmitLine', 'Suspended', 'SystemComment', 'SystemCPU', 'Timelimit', 'TimelimitRaw', 'TotalCPU',
        'UID', 'User', 'UserCPU', 'WCKey', 'WCKeyID', 'WorkDir']


def show_sbill_usage():
    print("Usage: sbill [OPTIONS(0)...]")
    print("")
    print("Query job billing and information")
    print("")
    print("JOB FILTER/QUERY OPTIONS:")
    print("  -j, --jobs=<jobid,...>            jobs in the specified list")
    print("      --name=<jobname,...>          jobs that have these name(s)")
    print("")
    print("  -A, --accounts=<account,...>      jobs charged to these account(s)")
    print("                                      Default: all of yours")
    print("  -a, --allusers                    jobs submitted by any users")
    print("  -u, --user=<username,...>         jobs submitted by these user(s)")
    print("                                      Default: only you")
    print("")
    print("  -L, --allclusters                 jobs on any clusters")
    print("  -p, --partition=<partition,...>   jobs on these partition(s)")
    print("  -w, --nodelist=<nodename,...>     jobs on these node(s)")
    print("      --reservation=<reserv,...>    jobs that run using these reservation(s)")
    print("      --state=<job_state,...>       jobs that are marked with these state(s)")
    print("")
    print("  -N, --nnodes=<num> or <min-max>   jobs that use the specified number of nodes")
    print("  -C, --ncpus=<num> or <min-max>    jobs that use the specified number of CPUs")
    print("  -G, --ngpus=<num> or <min-max>    jobs that use the specified number of GPUs")
    print("")
    print("      --range=<min[-max]>           jobs charged within the specified '"+Service+"' range")
    print("      --runtime=<min[-max[:unit]]>  jobs that have runtime within the range,")
    print("                                    where unit is \'sec\', \'min\', or \'hr\'")
    print("                                      Default: in 'hr' unit ")
    print("")
    print("  -E, --endtime=<time>              jobs that start before this time point")
    print("                                      Default: now")
    print("  -S, --starttime=<time>            jobs that end after this time point")
    print("                                      Default: today at 00:00:00")
    print("                                    where the format of <time> is...          ")
    print("                                      YYYY-MM-DD[THH:MM[:SS]] or              ")
    print("                                      MM/DD[/YY]-HH:MM[:SS] or                ")
    print("                                      MMDD[YY] or MM/DD[/YY] or MM.DD[.YY] or ")
    print("                                      now[{+|-}count[second|minute|hour|day|week]]")
    print("  Warning: When using -S and -E to get a net utilization within a time window,")
    print("           -T MUST be used for correctness.")
    print("")
    print("  -T, --trim, --truncate (slurm)    trim job runtime by trunicating start/end time")
    print("                                    according to -S, -E options")
    print("      --helptrim, --helptruncate    detailed explanation regarding -T, --trim")
    print("")
    print("JOB DISPLAY/OUTPUT OPTIONS:")
    print("  -l, --long                        display the jobs in SBILL long format")
    print("  -o, --format=<field,...>          list of fields to be displayed where... ")
    print("                                     = Column width can be fixed by using")
    print("                                       <field>%<width>")
    print("                                     = User's default format can be set by")
    print("                                       export SBILL_FORMAT=xxx")
    print("                                     = The \'Default\' field is an alias")
    print("                                       of SBILL default field list, try")
    print("                                       -o default,start,end")
    print("      --helpformat                  display all available fields, then exit")
    print("")
    # Simple quick histogram
    # --> to get a nicer bin range in x-axis
    #     with y-axis other than number of jobs (i.e., Service) [Those meaningful when get summed]
    # --> issue sbill iteratively for each of your desired bin range --> Manually plot in ...
    print("  -H, --histogram=<nbin>[:field]    display text-based histogram of the jobs")
    print("                                    where field is "+Service+", "+BillingUnit+",")
    print("                                                   NNode, NCPU, NGPU,")
    print("                                                   "+CPUusage+", "+GPUusage+",")
    print("                                                   RunSec, RunMin or RunHour")
    print("")
    print("  -X, --summary                     display only the summary report")
    print("      --sum-by-account              display sum(s) of the filtered jobs by account")
    print("      --sum-by-user                 display sum(s) of the filtered jobs by user")
    print("      --sumby[xxx]                  various aliases of --sum-by-xxx")
    print("                                    where xxx must be either account or user")
    print("")
    print("      --noconvert                   display without converting unit")
    print("      --units=[KMGTP]               display values in the specified unit type")
    print("                                      Default: G (GB)")
    # Hidden feature:  --units=G%3   --> 3 decimal places but for AllocRAM only
    print("")
    print("      --to_csv=<filename>           save job records in CSV format to <filename>")
    print("      --csv_sep=<character>         separator/delimiter for --to_csv option")
    print("")
    print("OTHERS:")
    print("  -h, --help                        print this help message, then exit")
    print("  -V, --version                     print SBILL version and few details, then exit")
    print("")
    # Hidden option
    #print("  --other_sacct_opts=(SLURM SACCT OPTIONS)     append other slurm sacct options, please use with caution")
    #print("")
    #
    # --long conflicts with --format --> latest take effect
    # --allusers conflicts with --user= --> latest take effect


def show_trim_explanation():
    print("")
    print("  -T, --trim, --truncate (slurm)    trim job runtime by trunicating start/end time")
    print("                                    according to -S, -E options")
    print("  Warning: When using -S and -E to get a net utilization within a time window,")
    print("           -T MUST be used for correctness.")
    print("  Note: -T takes no effect when neither -S nor -E is specified")
    print("")
    print("  ### Explanation ###")
    print("")
    print("    According to the definitions of -S,--starttime and -E,--endtime options, if any")
    print("  part of a job was active within the time window (no matter how short), then")
    print("  the entire job will be included and get involved in subsequent calculations.")
    print("")
    print("              starttime           endtime              ")
    print("                  |                  |                 ")
    print("  Job 1:            ===============            Included")
    print("  Job 2:                    ================   Included")
    print("  Job 3:     ==========                        Included")
    print("  Job 4:    =============================      Included")
    print("  Job 5: -------                               Excluded")
    print("  Job 6:                                ----   Excluded")
    print("")
    print("    This causes the results of 'Total "+Service+" spent' and other net usages, when using")
    print("  together with -S or -E option, to be ambiguous.")
    print("")
    print("    By adding -T, --trim or --truncate, the jobs' runtime will be further trimmed")
    print("  by truncating their starttime and endtime at the time points specified by")
    print("  -S, -E options.")
    print("")
    print("              starttime           endtime              ")
    print("                  |                  |                 ")
    print("  Job 1:          |  =============== |         Included")
    print("  Job 2:          |          ========|------   Partially included")
    print("  Job 3:     -----|====              |         Partially included")
    print("  Job 4:    ------|==================|---      Partially included")
    print("  Job 5: -------  |                  |         Excluded")
    print("  Job 6:          |                  |  ----   Excluded")
    print("")
    print("    The values of 'Total "+Service+" spent' and other net usages are now as it should be.")
    print("")
    print("    In contrast, by using -T, users must be reminded that '"+Service+"', 'Elapsed' and")
    print("  some other fields of each job row could come from a portion of the job. ")
    print("")


# ---- END OF COMPILE-TIME SETUP -----


# ----- import libraries 1 -----
from sys import argv, exit
from subprocess import check_output, CalledProcessError


# ------------- Parse arguments ----------
i = 1
slurm_filter_opts = []
slurm_format_opts = []
slurm_other_format_opts = []
slurm_other_sacct_opts = []

temp_opt = []
state_selected = []
reservation_selected = []
is_show_job_histogram = False
nbin_histogram = 1
field_histogram = Service
range_minmax = []
runtime_minmax = []
runtime_to_sec = 3600
range_ncpu_minmax = []
range_ngpu_minmax = []
is_show_total_SU = True
sum_by = []
csv_outfile = ''
csv_delimiter = ","
slurm_mem_unit = "G"
slurm_mem_decimal = None
is_show_only_summary = False
has_account_filter = False
trim_jobtime = False
has_starttime_filter = False
has_endtime_filter = False

def parse_filter_opts(i, opt1, opt2, has_argv, var=slurm_filter_opts):
    # Case 1: -X xxx
    if opt1 != '' and argv[i] == opt1 :
        var.append(argv[i])
        i += 1
        if has_argv :
            if argv[i].startswith('-') :
                print('Incorrect input argument for '+argv[i-1]+' :', argv[i], 'does not seem to be valid.')
                exit(1)
            else:
                var.append(argv[i])
                i += 1
    # Case 2: -Xxxx
    elif opt1 != '' and has_argv and argv[i].startswith(opt1) :
        var.append(argv[i])
        i += 1
    # Case 3: --X xxx
    elif opt2 != '' and argv[i] == opt2 :
        var.append(argv[i])
        i += 1
        if has_argv :
            if argv[i].startswith('-') :
                print('Incorrect input argument for '+argv[i-1]+' :', argv[i], 'does not seem to be valid.')
                exit(1)
            else:
                var.append(argv[i])
                i += 1
    # Case 4: --X=xxx
    elif opt2 != '' and has_argv and argv[i].startswith(opt2+'=') :
        if argv[i] == opt2+'=' :
            print('Missing an input after ::', argv[i])
            exit(1)
        else:
            var.append(argv[i])
            i += 1

    return i


while i < len(argv) :
    j = i

    # *** Slurm filter options ***
    try:
        i = parse_filter_opts(i,'-A','--accounts', has_argv=True)
    except IndexError :
        print('Invalid input argument in -A, --accounts option :: List of accounts was NOT given.')
        exit(1)
    if i != j :
        has_account_filter = True
        continue ;

    i = parse_filter_opts(i,'-a','--allusers', has_argv=False)
    if i != j : continue ;

    i = parse_filter_opts(i,'-L','--allclusters', has_argv=False)
    if i != j : continue ;

    try:
        i = parse_filter_opts(i,'-E','--endtime', has_argv=True)
    except IndexError :
        print('Invalid input argument in -E, --endtime option :: Endtime was NOT specified.')
        exit(1)
    if i != j :
        has_endtime_filter = True
        continue

    try:
        i = parse_filter_opts(i,'-j','--jobs', has_argv=True)
    except IndexError :
        print('Invalid input argument in -j, --jobs option :: List of job id was NOT given.')
        exit(1)
    if i != j : continue ;

    try:
        i = parse_filter_opts(i,'--name','--name', has_argv=True)
    except IndexError :
        print('Invalid input argument in --name option :: List of job names was NOT given.')
        exit(1)
    if i != j : continue ;

    try:
        i = parse_filter_opts(i,'-N','--nnodes', has_argv=True)
    except IndexError :
        print('Invalid input argument in -N, --nnodes option :: The number of nodes was NOT given.')
        exit(1)
    if i != j :
        if slurm_filter_opts[-1].startswith('-N') :
            slurm_filter_opts[-1] = '--nnodes=' + slurm_filter_opts[-1][2:]
        elif len(slurm_filter_opts) >1 and slurm_filter_opts[-2] == '-N' :
            slurm_filter_opts[-2] = '--nnodes'
        continue


    # *** There seem to be a bug in this SACCT option, when the job contains GPUs ***
    #     --> Implement this ourself
    #try:
    #    i = parse_filter_opts(i,'-I','--ncpus', has_argv=True)
    #except IndexError :
    #    print('Invalid input argument in -I, --ncpus option :: The number of CPUs was NOT given.')
    #    exit(1)
    #if i != j : continue ;

    try:
        i = parse_filter_opts(i,'-w','--nodelist', has_argv=True)
    except IndexError :
        print('Invalid input argument in -w, --nodelist option :: List of nodes was NOT given.')
        exit(1)
    if i != j :
        if slurm_filter_opts[-2] == '-w' :
            slurm_filter_opts[-2] = '--nodelist'
        elif slurm_filter_opts[-1].startswith('-w') :
            slurm_filter_opts[-1] = '--nodelist=' + slurm_filter_opts[-1][2:]
        continue


    try:
        i = parse_filter_opts(i,'-p','--partition', has_argv=True)
    except IndexError :
        print('Invalid input argument in -p, --partition option :: List of partition names was NOT given.')
        exit(1)
    if i != j :
        if slurm_filter_opts[-2] == '-p' :
            slurm_filter_opts[-2] = '--partition'
        elif slurm_filter_opts[-1].startswith('-p') :
            slurm_filter_opts[-1] = '--partition=' + slurm_filter_opts[-1][2:]
        continue

    try:
        i = parse_filter_opts(i,'-S','--starttime', has_argv=True)
    except IndexError :
        print('Invalid input argument in -S, --starttime option :: Starttime was NOT specified.')
        exit(1)
    if i != j :
        has_starttime_filter = True
        continue

    try:
        i = parse_filter_opts(i,'-u','--user', has_argv=True)
    except IndexError :
        print('Invalid input argument in -u, --user option :: Username was NOT given.')
        exit(1)
    if i != j : continue ;


    # *** Format option ***
    try:
        i = parse_filter_opts(i,'-o','--format', has_argv=True, var=temp_opt)
    except IndexError :
        print('Invalid input argument in -o, --format option :: Format was not specified.')
        exit(1)
    if len(temp_opt) > 1 :
        slurm_format_opts = temp_opt[1].split(',')
    elif len(temp_opt) == 1 :
        if temp_opt[0].startswith('-o') :
            slurm_format_opts = temp_opt[0][2:].split(',')
        elif temp_opt[0].startswith('--format=') :
            slurm_format_opts = temp_opt[0][9:].split(',')
    if i != j : temp_opt = [] ; continue ;

    if argv[i] == '-l' or argv[i] == '--long' :
        slurm_format_opts = GLOBAL_SBILL_LONG_FORMAT
        i += 1
        continue


    # *** SBILL Filter options ***
    try:
        i = parse_filter_opts(i,'--state','--state', has_argv=True, var=temp_opt) # Borrow
    except IndexError :
        print('Invalid input argument in --state option :: List of states was NOT given.')
        exit(1)
    if len(temp_opt) > 1 :
        state_selected = temp_opt[1].split(',')
    elif len(temp_opt) == 1 :
        if temp_opt[0].startswith('--state=') :
            state_selected = temp_opt[0][8:].split(',')
        else:
            print('Invalid input argument in --state option :: Ambiguous inputs, please explicitly use --state=<STATE_LIST>.')
            exit(1)
    if i != j : temp_opt = [] ; continue ;

    try:
        i = parse_filter_opts(i,'--reservation','--reservation', has_argv=True, var=temp_opt) # Borrow
    except IndexError :
        print('Invalid input argument in --reservation option :: List of reservations was NOT given.')
        exit(1)
    if len(temp_opt) > 1 :
        reservation_selected = temp_opt[1].split(',')
    elif len(temp_opt) == 1 :
        if temp_opt[0].startswith('--reservation=') :
            reservation_selected = temp_opt[0][14:].split(',')
        else:
            print('Invalid input argument in --reservation option :: Ambiguous inputs, please explicitly use --reservation=<RESERVATION_LIST>.')
            exit(1)
    if i != j : temp_opt = [] ; continue ;

    if argv[i].startswith('--range'):
        if argv[i] == '--range' :
            temp = argv[i+1].split('-')
        elif argv[i][7] == '=' :
            temp = argv[i][8:].split('-')
        else:
            print('Unknown options/arguments :: \''+argv[i]+'\'\nSee \'sbill --help\'')
            exit(1)
        try:
            if len(temp) == 1 :
                range_minmax = [float(temp[0])]
            elif len(temp) > 1 :
                range_minmax = [float(temp[0]), float(temp[1])]
            else:
                print('Invalid format of --range option, should be either <min> or <min>-<max>')
                exit(1)
        except ValueError :
            if argv[i] == '--range' :
                print('Invalid input argument in', argv[i],':: cannot convert \"'+argv[i+1]+'\" to proper numbers, i.e., min and max')
            elif argv[i][7] == '=' :
                print('Invalid input argument in', argv[i],':: cannot convert \"'+argv[i][8:]+'\" to proper numbers, i.e., min and max')
            exit(1)
        i += 2 if argv[i] == '--range' else 1
        continue

    if argv[i].startswith('--runtime'):
        # range
        if argv[i] == '--runtime' :
            temp = argv[i+1].split(':')
        elif argv[i][9] == '=' :
            temp = argv[i][10:].split(':')
        else:
            print('Unknown options/arguments :: \''+argv[i]+'\'\nSee \'sbill --help\'')
            exit(1)
        try:
            temp = temp[0].split('-')
            if len(temp) == 1 :
                runtime_minmax = [int(temp[0])]
            elif len(temp) > 1 :
                runtime_minmax = [int(temp[0]), int(temp[1])]
            else:
                print('Invalid format of --runtime option, should be either <min> or <min>-<max>, prior to :<unit>')
                exit(1)
        except ValueError :
            if argv[i] == '--runtime' :
                print('Invalid input argument in', argv[i],':: cannot convert \"'+argv[i+1]+'\" to proper numbers, i.e., min and max')
            elif argv[i][9] == '=' :
                print('Invalid input argument in', argv[i],':: cannot convert \"'+argv[i][10:]+'\" to proper numbers, i.e., min and max')
            exit(1)
        # unit
        if argv[i] == '--runtime' :
            temp = argv[i+1].split(':')
        elif argv[i][9] == '=' :
            temp = argv[i][10:].split(':')
        if len(temp) > 1 :
            temp = temp[1].lower()
            if temp == 'sec' or temp == 'second' or temp == 'seconds' :
                runtime_to_sec = 1
            elif temp == 'min' or temp == 'minute' or temp == 'minutes' :
                runtime_to_sec = 60
            elif temp != 'hr' and temp != 'hour' and temp != 'hours' :
                print('sbill: warning: Invalid temporal unit for --runtime option. Back to the default \'hour\'.')
        i += 2 if argv[i] == '--runtime' else 1
        continue

    if argv[i].startswith('--ncpus'):
        if argv[i] == '--ncpus' :
            temp = argv[i+1].split('-')
        elif argv[i][7] == '=' :
            temp = argv[i][8:].split('-')
        else:
            print('Unknown options/arguments :: \''+argv[i]+'\'\nSee \'sbill --help\'')
        try:
            if len(temp) == 1 :
                range_ncpu_minmax = [int(temp[0]), int(temp[0])]
            elif len(temp) > 1 :
                range_ncpu_minmax = [int(temp[0]), int(temp[1])]
            else:
                print('Invalid format of --ncpus option, should be either <num> or <min>-<max>')
                exit(1)
        except ValueError :
            if argv[i] == '--ncpus' :
                print('Invalid input argument in', argv[i],':: cannot convert \"'+argv[i+1]+'\" to valid number(s)')
            elif argv[i][7] == '=' :
                print('Invalid input argument in', argv[i],':: cannot convert \"'+argv[i][8:]+'\" to valid number(s)')
            exit(1)
        i += 2 if argv[i] == '--ncpus' else 1
        continue
    if argv[i].startswith('-C'):
        if argv[i] == '-C' :
            temp = argv[i+1].split('-')
        else:
            temp = argv[i][2:].split('-')
        try:
            if len(temp) == 1 :
                range_ncpu_minmax = [int(temp[0]), int(temp[0])]
            elif len(temp) > 1 :
                range_ncpu_minmax = [int(temp[0]), int(temp[1])]
            else:
                print('Invalid format of -C option, should be either <num> or <min>-<max>')
                exit(1)
        except ValueError :
            if argv[i] == '-C' :
                print('Invalid input argument in', argv[i],':: cannot convert \"'+argv[i+1]+'\" to valid number(s)')
            else:
                print('Invalid input argument in', argv[i],':: cannot convert \"'+argv[i][2:]+'\" to valid number(s)')
            exit(1)
        i += 2 if argv[i] == '-C' else 1
        continue

    if argv[i].startswith('--ngpus') :
        if argv[i] == '--ngpus' :
            temp = argv[i+1].split('-')
        elif argv[i][7] == '=' :
            temp = argv[i][8:].split('-')
        else:
            print('Unknown options/arguments :: \''+argv[i]+'\'\nSee \'sbill --help\'')
        try:
            if len(temp) == 1 :
                range_ngpu_minmax = [int(temp[0]), int(temp[0])]
            elif len(temp) > 1 :
                range_ngpu_minmax = [int(temp[0]), int(temp[1])]
            else:
                print('Invalid format of --ngpus option, should be either <num> or <min>-<max>')
                exit(1)
        except ValueError :
            if argv[i] == '--ngpus' :
                print('Invalid input argument in', argv[i],':: cannot convert \"'+argv[i+1]+'\" to valid number(s)')
            elif argv[i][7] == '=' :
                print('Invalid input argument in', argv[i],':: cannot convert \"'+argv[i][8:]+'\" to valid number(s)')
            exit(1)
        i += 2 if argv[i] == '--ngpus' else 1
        continue
    if argv[i].startswith('-G'):
        if argv[i] == '-G' :
            temp = argv[i+1].split('-')
        else:
            temp = argv[i][2:].split('-')
        try:
            if len(temp) == 1 :
                range_ngpu_minmax = [int(temp[0]), int(temp[0])]
            elif len(temp) > 1 :
                range_ngpu_minmax = [int(temp[0]), int(temp[1])]
            else:
                print('Invalid format of -G option, should be either <num> or <min>-<max>')
                exit(1)
        except ValueError :
            if argv[i] == '-G' :
                print('Invalid input argument in', argv[i],':: cannot convert \"'+argv[i+1]+'\" to valid number(s)')
            else:
                print('Invalid input argument in', argv[i],':: cannot convert \"'+argv[i][2:]+'\" to valid number(s)')
            exit(1)
        i += 2 if argv[i] == '-G' else 1
        continue


    # *** Slurm output options ***
    if argv[i] == '--sumby' or argv[i] == '--sum-by' :
        sum_by = argv[i+1]
        if 'account' in sum_by.lower() :
            sum_by = 'Account'
        elif 'user' in sum_by.lower() :
            sum_by = 'User'
        else:
            print('Unknown options/arguments :: \''+argv[i]+'\' with the following argument \''+argv[i+1]+'\' is invalid.')
            print('It should be either account or user.\nSee \'sbill --help\'')
            exit(1)
        i += 2
        continue
    if argv[i].startswith('--sumby') :
        sum_by = argv[i][7:]
        if 'account' in sum_by.lower() :
            sum_by = 'Account'
        elif 'user' in sum_by.lower() :
            sum_by = 'User'
        else:
            print('Unknown options/arguments :: \''+argv[i]+'\'\nSee \'sbill --help\'')
            exit(1)
        i += 1
        continue
    if argv[i].startswith('--sum-by') :
        sum_by = argv[i][8:]
        if 'account' in sum_by.lower() :
            sum_by = 'Account'
        elif 'user' in sum_by.lower() :
            sum_by = 'User'
        else:
            print('Unknown options/arguments :: \''+argv[i]+'\'\nSee \'sbill --help\'')
            exit(1)
        i += 1
        continue

    try:
        i = parse_filter_opts(i,'-H','--histogram', has_argv=True, var=temp_opt) # Borrow
    except IndexError :
        print('Invalid input argument in -H, --histogram option :: The number of bins was NOT given. Try \'-H 10\'')
        exit(1)
    if len(temp_opt) > 1 :
        is_show_job_histogram = True
        temp_opt = temp_opt[1].split(':')
        if len(temp_opt) >= 2 :
            field_histogram = temp_opt[1]
        try:
            nbin_histogram = max(int(temp_opt[0]), 1)
        except ValueError :
            print('Invalid input argument in -H, --histogram option :: cannot convert \''+temp_opt[0]+'\' to a valid number of bin')
            exit(1)
    elif len(temp_opt) == 1 :
        is_show_job_histogram = True
        if temp_opt[0].startswith('-H') :
            temp_opt = temp_opt[0][2:].split(':')
            if len(temp_opt) >= 2 :
                field_histogram = temp_opt[1]
        elif temp_opt[0].startswith('--histogram=') :
            temp_opt = temp_opt[0][12:].split(':')
            if len(temp_opt) >= 2 :
                field_histogram = temp_opt[1]
        else:
            print('Invalid format of -H or --histogram= option.\nSee \'sbill --help\'')
            exit(1)
        try:
            nbin_histogram = max(int(temp_opt[0]), 1)
        except ValueError :
            print('Invalid input argument in -H, --histogram option :: cannot convert \''+temp_opt[0]+'\' to a valid number of bin')
            exit(1)
    if i != j : temp_opt = [] ; continue ;

    if argv[i].startswith('--to_csv'):
        if argv[i] == '--to_csv' :
            csv_outfile = argv[i+1]
        elif argv[i][8] == '=' :
            csv_outfile = argv[i][9:]
        else:
            print('Unknown options/arguments :: \''+argv[i]+'\'\nSee \'sbill --help\'')
        if csv_outfile == '' :
            print('Missing an input filename after :: --to_csv[=]<filename>')
            exit(1)
        else:
            i += 2 if argv[i] == '--to_csv' else 1
            continue

    if argv[i].startswith('--csv_sep'):
        if argv[i] == '--csv_sep' :
            csv_delimiter = argv[i+1]
        elif argv[i][9] == '=' :
            csv_delimiter = argv[i][10:]
        else:
            print('Unknown options/arguments :: \''+argv[i]+'\'\nSee \'sbill --help\'')
        if csv_delimiter == '' :
            print('Missing an input separator/delimiter :: --csv_sep[=]<character>')
            exit(1)
        else:
            i += 2 if argv[i] == '--csv_sep' else 1
            continue

    if argv[i] == '-X' or argv[i] == '--summary' :
        is_show_only_summary = True
        i += 1
        continue


    # Other Slurm options
    if argv[i] == '-T' or argv[i] == '--trim' or argv[i] == '--trim-jobtime' or  argv[i] == '--truncate' :
        isAlreadyIn = False
        for topt in ['-T','--trim','--trim-jobtime','--truncate'] :
            if topt in slurm_filter_opts :
                isAlreadyIn = True
        if not isAlreadyIn :
            slurm_filter_opts.append('--truncate')
        trim_jobtime = True
        i += 1
        continue

    i = parse_filter_opts(i,'','--noconvert', has_argv=False, var=slurm_other_format_opts)
    if i != j :
        slurm_mem_unit = None
        continue

    try:
        i = parse_filter_opts(i,'','--units', has_argv=True, var=temp_opt)
    except IndexError :
        print('Invalid input argument in --units option :: Units was not specified.')
        exit(1)
    if len(temp_opt) > 1 :
        slurm_other_format_opts.append('--units=' + temp_opt[1][0])
        slurm_mem_unit    = temp_opt[1][0]
        temp_opt = temp_opt[1].split('%')
        if len(temp_opt) > 1 :
            try:
                slurm_mem_decimal = int(temp_opt[1])
            except ValueError :
                slurm_mem_decimal = None
    elif len(temp_opt) == 1 :
        if temp_opt[0].startswith('--units='):
            slurm_other_format_opts.append(temp_opt[0][:9])
            slurm_mem_unit = temp_opt[0][8]
            temp_opt = temp_opt[0].split('%')
            if len(temp_opt) > 1 :
                try:
                    slurm_mem_decimal = int(temp_opt[1])
                except ValueError :
                    slurm_mem_decimal = None
        else:
            print('Invalid input argument in --units option :: Ambiguous inputs, please explicitly use --units=[KMGTP].')
            exit(1)
    if i != j : temp_opt = [] ; continue ;


    # Other miscellaneous options
    if argv[i] == '-V' or argv[i] == '--version' :
        slurm = str(check_output(['sinfo','-V']).decode('ascii'))
        print('sbill',__version__)
        print('-> For',__HPC__)
        print('-> Using', slurm, end='')
        print('-> Accounting start on',SLURM_STARTDATE)
        print(AdminNoteMessage)
        exit(0)

    if argv[i] == '-h' or argv[i] == '--help' :
        show_sbill_usage()
        exit(0)

    if argv[i] == '--helptrim' or argv[i] == '--helptruncate' :
        show_trim_explanation()
        exit(0)

    if argv[i] == '--helpformat' :
        print("")
        print("--- Fields available from SLURM ---")
        num = 0
        for field in sacct_all_format_opts :
            print('{:<20}'.format(field), end="")
            num += 1
            if num % 4 == 0 :
                print("")
        print("\n")
        print("--- Fields available from SBILL ---")
        print('{:<20}'.format(Service), end="")
        print('{:<20}'.format(BillingUnit), end="")
        print('{:<20}'.format(CPUusage), end="")
        print('{:<20}'.format(GPUusage), end="\n")
        print('{:<20}'.format("NGPUS"), end="")
        print('{:<20}'.format("AllocRAM"), end="")
        print('{:<20}'.format("Billing"), end="")
        print('{:<20}'.format("Default"), end="\n")
        print("")
        print("Note: ")
        print("1) "+CPUusage+" and "+GPUusage+" are of allocation.")
        print("2) "+BillingUnit+", AllocRAM and Billing are only available after the job starts.")
        print("3) \'Default\' field is equal to \'"+','.join(GLOBAL_SBILL_DEFAULT_FORMAT)+"\'\n")
        exit(0)

    # Not intented to be used
    if argv[i].startswith('--other_sacct_opts="') :
        slurm_other_sacct_opts = argv[i][20:-1].split(' ')
        i += 1
        continue

    if i == j :
        print('Unknown options/arguments :: \''+argv[i]+'\'\nSee \'sbill --help\'')
        exit(1)


# Check input options
if has_starttime_filter and has_endtime_filter and is_show_only_summary :
    print('sbill: note: Using --summary with both --starttime and --endtime will implicitly set --truncate (--trim).\n')
    isAlreadyIn = False
    for topt in ['-T','--trim','--trim-jobtime','--truncate'] :
        if topt in slurm_filter_opts :
            isAlreadyIn = True
    if not isAlreadyIn :
        slurm_filter_opts.append('--truncate')
    trim_jobtime = True


# ------  Functions to get data from SLURM ------

def get_tres(string, key, ReturnInt=True):
    start = string.find(key)
    if start == -1 :
        return 0
    else:
        start += len(key)
        end = string.find(',', start)
        if ReturnInt :
           return int(string[start:end])
        else:
           return string[start:end]


def parse_alloctres(datain, key, default_charperline=150):

    nrow = datain.count('\n')
    dataout = {}
    for k in key :
        dataout[k] = [0]*nrow

    if nrow == 0 :
        return dataout

    start = 0
    for i in range(nrow):
        charperline = default_charperline
        end = datain.find("\n", start, start+charperline)
        while end == -1 :
            charperline += 100
            end = datain.find("\n", start, start+charperline)
        temp = datain[start:end]

        for k in key :
            if k == 'mem' :
                dataout[k][i] = get_tres(temp, k + '=', ReturnInt=False)
            else:
                dataout[k][i] = get_tres(temp, k + '=')

        start = end + 1

    return dataout


def parse_sacct(datain, key, sep, default_charperline=150):

    nrow    = datain.count('\n')
    ncol    = len(key)
    dataout = {}
    for k in key :
        dataout[k] = [None]*nrow

    if nrow == 0 :
        return dataout

    start = 0
    for i in range(nrow):
        charperline = default_charperline
        end = datain.find("\n", start, start+charperline)
        while end == -1 :
            charperline += 100
            end = datain.find("\n", start, start+charperline)
        temp = datain[start:end]

        markL = 0
        markR = temp.find(sep, markL)
        for k in key :
            dataout[k][i] = temp[markL:markR]
            markL = markR+1
            markR = temp.find(sep, markL)

        start = end + 1

    return dataout


def parse_sacctmgr(datain, default_charperline=150):

    nrow    = datain.count('\n')
    dataout = [None]*nrow

    if nrow == 0 :
        return dataout

    start = 0
    for i in range(nrow):
        charperline = default_charperline
        end = datain.find("\n", start, start+charperline)
        while end == -1 :
            charperline += 100
            end = datain.find("\n", start, start+charperline)
        dataout[i] = datain[start:end]

        start = end + 1

    return dataout


def data_from_sacct(sacct_opts, columns, sep='|', isAllocTres=False):
    try:
        data = check_output(['sacct'] + sacct_opts, shell=False)
    except CalledProcessError :
        print('sbill: error: Non-zero return code from SLRUM accounting service.')
        print(sacct_opts)
        exit(1)
    else:
        if isAllocTres:
            return parse_alloctres(data.decode('utf-8'), columns)
        else:
            return parse_sacct(data.decode('utf-8'), columns, sep)


def AssocAccount_from_sacctmgr():
    try:
        data = check_output(['sacctmgr','show','assoc','-n','-P','format=qos'], shell=False)
    except CalledProcessError :
        print('sbill: error: Non-zero return code from sacctmgr command.')
        exit(1)
    else:
        data = parse_sacctmgr(data.decode('utf-8'))

    return data[1:]


# ------------ Main computation  ------------

# Get associated accounts and check for Admin accounts
assoc = list(dict.fromkeys( AssocAccount_from_sacctmgr() )) # Remove duplicates
if isRestricted :
    for admin_acc in AdminAccounts :
        if admin_acc in assoc :
            isRestricted = False
# Only show jobs submitted using associated accounts (First guard) = Not enough
# Strength: Fast, because query less
# Weakness: Won't work when users specify non-associated accounts directly using -A
#           (Tinkering user's input is troublesome)
if isRestricted :
    if not has_account_filter :
        slurm_extra_account_filter = '--accounts=' + ','.join(assoc)
        slurm_other_sacct_opts.append(slurm_extra_account_filter)

# Parse AllocTres
format_opts = ['--format=alloctres','-X','-p','--delimiter=,','--noheader']
slurm_opts = format_opts + slurm_filter_opts + slurm_other_sacct_opts
usage = data_from_sacct(slurm_opts, columns=Treskey.copy(), sep=None, isAllocTres=True)

# Get other essential fields
format_opts = '--format=jobid,account,ncpus,elapsedraw'
col_names   = ['JobID','Account','NCPUS','ElapsedRaw']

if len(state_selected) != 0 :
    format_opts += ',state'
    col_names   += ['State']
if len(reservation_selected) != 0 :
    format_opts += ',reservation'
    col_names   += ['Reservation']

format_opts = [format_opts,'-X','-p','--noheader']
slurm_opts = format_opts + slurm_filter_opts + slurm_other_sacct_opts
info = data_from_sacct(slurm_opts, columns=col_names, sep='|')

# Merge together
usage.update(info)


# ---- SBILL filter

def pop_usage(mask):
    for k in list(usage.keys()):
        iremain = -1
        for i in range(len(mask)):
            if mask[i] :
                iremain += 1
            else:
                del usage[k][iremain+1]


def filter_usage(Col, List):
    nrow = len(usage['JobID'])
    mask = [False]*nrow
    for nr in range(nrow):
        mask[nr] = usage[Col][nr].lower().startswith( tuple(k.lower() for k in List) )
    pop_usage(mask)


def filter_acct(Col, List):
    nrow = len(usage['JobID'])
    mask = [False]*nrow
    any_removed = False
    for nr in range(nrow):
        if usage[Col][nr] in List :
            mask[nr] = True
        else:
            any_removed = True
    pop_usage(mask)
    return any_removed


# I. Account
# Only show jobs submitted using associated accounts (Second guard)
# Strength: Correct, No loop hole
# Weakness: Slow
remove_nonassoc = False
if isRestricted :
    remove_nonassoc = filter_acct('Account', assoc)


# II. Reervation -- (Before = Filter more)
if len(reservation_selected) != 0 :
    filter_usage('Reservation', reservation_selected)
# III. State -- (Later = Filter less)
if len(state_selected) != 0 :
    filter_usage('State', state_selected)


# --- SBILL calculation

# Compute Service and core-hour
usage['ElapsedRaw'] = [ int(num) if num.isdigit() else 0 for num in usage['ElapsedRaw'] ]
usage['NCPUS']  = [ int(num) for num in usage['NCPUS'] ]
usage[Service]  = [ calService(b,s) for b,s in zip(usage[Treskey[0]],usage['ElapsedRaw']) ]
usage[CPUusage] = [ calCPUusage(ncpu,s) for ncpu,s in zip(usage['NCPUS'],usage['ElapsedRaw']) ]
usage[GPUusage] = [ calGPUusage(ngpu,s) for ngpu,s in zip(usage[Treskey[1]],usage['ElapsedRaw']) ]
usage[BillingUnit] = [ calBillingUnit(b) for b in usage[Treskey[0]] ]

# Filter range before sum and get other info
if len(range_minmax) >= 1 :
    if len(range_minmax) == 1 :
        mask = [ range_minmax[0]<=value for value in usage[Service] ]
    else:
        mask = [ (range_minmax[0]<=value) & (value<range_minmax[1]) for value in usage[Service] ]
    pop_usage(mask)

if len(runtime_minmax) >= 1 :
    if len(runtime_minmax) == 1 :
        mask = [ runtime_to_sec*runtime_minmax[0]<=value for value in usage['ElapsedRaw'] ]
    else:
        mask = [ (runtime_to_sec*runtime_minmax[0]<=value) & (value<runtime_to_sec*runtime_minmax[1]) for value in usage['ElapsedRaw'] ]
    pop_usage(mask)
    if runtime_to_sec == 1 :
        runtime_unit = 'second'
    elif runtime_to_sec == 60 :
        runtime_unit = 'minute'
    else:
        runtime_unit = 'hour'

if len(range_ncpu_minmax) >= 2 :
    mask = [ (range_ncpu_minmax[0]<=value) & (value<=range_ncpu_minmax[1]) for value in usage['NCPUS'] ]
    pop_usage(mask)

if len(range_ngpu_minmax) >= 2 :
    if 'gpu' in Treskey[1] :
        mask = [ (range_ngpu_minmax[0]<=value) & (value<=range_ngpu_minmax[1]) for value in usage[Treskey[1]] ]
        pop_usage(mask)
    else:
        print('sbill: error: --ngpus is NOT supported for this cluster. Contact your system admin or remove it.')
        exit(1)

# If no jobs remain after being sorted out
if len(usage['JobID']) == 0 :
    if isRestricted :
        print('*** No (associated) jobs to be displayed ***')
        if remove_nonassoc :
            print('= You can only see the jobs that are associated with your Slurm billing accounts')
    else:
        print('*** No jobs to be displayed ***')
    exit(0)

# Sum
Total_SU_spent = sum( usage[Service] )
Total_CPUusage_obtained = sum( usage[CPUusage] )
Total_GPUusage_obtained = sum( usage[GPUusage] )


# ------------ Format of extra fields ------------

# Get format options
if len(slurm_format_opts) == 0 :
    from os import getenv
    env_sbill_format = getenv('SBILL_FORMAT')
    if env_sbill_format is not None :
        slurm_format_opts = env_sbill_format.split(',')
    else:
        slurm_format_opts = GLOBAL_SBILL_DEFAULT_FORMAT

for i in range(len(slurm_format_opts)):
    if 'default' == slurm_format_opts[i].lower() :
        slurm_format_opts = slurm_format_opts[:i] + GLOBAL_SBILL_DEFAULT_FORMAT + slurm_format_opts[i+1:]

# Parse format options == fields
# --> separate field and len appeared in '--format=field1%len1,field2%len2'
len_opt = [-1]*len(slurm_format_opts)        # -1 indicates default
for i in range(len(slurm_format_opts)) :
    temp = slurm_format_opts[i].split('%')
    if len(temp) > 1 and temp[1] != '' :
        len_opt[i] = int(temp[1])
        slurm_format_opts[i] = temp[0]
        if temp[0].lower() == Service.lower():
            ServiceDecimal = len_opt[i]
        elif temp[0].lower() == CPUusage.lower():
            CPUusageDecimal = len_opt[i]
        elif temp[0].lower() == GPUusage.lower():
            GPUusageDecimal = len_opt[i]
        elif temp[0].lower() == BillingUnit.lower():
            BillingUnitDecimal = len_opt[i]

# --- Headers of fields only appears in SBILL will be fixed
# --- Headers of fields from SACCT are as specified in --format=, fix them

lower_sacct_all_format_opts = [ n.lower() for n in sacct_all_format_opts ]

sacct_format_opts = slurm_format_opts.copy()     # Fields to be inquired
display_format_opts = slurm_format_opts.copy()   # Fields/Column names to be displayed

lower_format_opts = [ n.lower() for n in slurm_format_opts ]
j = 0
for i in range(len(lower_format_opts)):
    # Sbill required fields
    if Service.lower() == lower_format_opts[i] :
        sacct_format_opts.pop(j)
        display_format_opts[i] = Service
    elif 'ngpus' == lower_format_opts[i] :
        sacct_format_opts.pop(j)
        display_format_opts[i] = 'NGPUS'
    elif CPUusage.lower() == lower_format_opts[i] :
        sacct_format_opts.pop(j)
        display_format_opts[i] = CPUusage
    elif GPUusage.lower() == lower_format_opts[i] :
        sacct_format_opts.pop(j)
        display_format_opts[i] = GPUusage
    elif BillingUnit.lower() == lower_format_opts[i] :
        sacct_format_opts.pop(j)
        display_format_opts[i] = BillingUnit
    elif 'allocram' == lower_format_opts[i] :
        sacct_format_opts.pop(j)
        display_format_opts[i] = 'AllocRAM'

        # Convert Mem unit of AllocRAM
        if slurm_mem_unit in ['K','M','G','T','P'] :
            mem_unit_ratio = {'K': 1, 'M': 2, 'G': 3, 'T': 4, 'P': 5}

            if slurm_mem_decimal == None :
                if slurm_mem_unit == 'M' or slurm_mem_unit == 'K' :
                    slurm_mem_decimal = 0
                else:
                    slurm_mem_decimal = 2
            slurm_mem_format = '{:,.' + str(slurm_mem_decimal) + 'f}'

            def convertMem(text, to_unit):
                text = str(text)
                if len(text) < 2 :
                    return text
                from_unit = text[-1]
                value = float(text[:-1])
                value *= pow(1024, mem_unit_ratio[from_unit] - mem_unit_ratio[to_unit])
                return slurm_mem_format.format(value) + to_unit

            usage[Treskey[2]] = [ convertMem(m,slurm_mem_unit) for m in usage[Treskey[2]] ]

    elif 'billing' == lower_format_opts[i] :
        sacct_format_opts.pop(j)
        display_format_opts[i] = 'Billing'
    elif 'account' == lower_format_opts[i] :
        sacct_format_opts.pop(j)
        display_format_opts[i] = 'Account'
    elif 'state' == lower_format_opts[i] :
        if len(state_selected) != 0 :
            sacct_format_opts.pop(j)
        else:
            sacct_format_opts[j] = 'State'
            j += 1
        display_format_opts[i] = 'State'
    elif 'reservation' == lower_format_opts[i] :
        if len(reservation_selected) != 0 :
            sacct_format_opts.pop(j)
        else:
            sacct_format_opts[j] = 'Reservation'
            j += 1
        display_format_opts[i] = 'Reservation'
    elif 'ncpus' == lower_format_opts[i] :
        sacct_format_opts.pop(j)
        display_format_opts[i] = 'NCPUS'
    elif 'elapsedraw' == lower_format_opts[i] :
        sacct_format_opts.pop(j)
        display_format_opts[i] = 'ElapsedRaw'

    # (Possible) Misspelled/Hidden options
    elif 'elapse' == lower_format_opts[i] :
        sacct_format_opts[j]   = 'Elapsed'
        display_format_opts[i] = 'Elapsed'
        print('sbill: note: Undocumented field \''+slurm_format_opts[i]+'\' used in --format= option. Change to \''+display_format_opts[i]+'\'.')
        j += 1
    elif 'elapseraw' == lower_format_opts[i] :
        sacct_format_opts.pop(j)
        display_format_opts[i] = 'ElapsedRaw'
        print('sbill: note: Undocumented field \''+slurm_format_opts[i]+'\' used in --format= option. Change to \''+display_format_opts[i]+'\'.')
    elif 'node' == lower_format_opts[i] :
        sacct_format_opts[j]   = 'NodeList'
        display_format_opts[i] = 'NodeList'
        print('sbill: note: Undocumented field \''+slurm_format_opts[i]+'\' used in --format= option. Change to \''+display_format_opts[i]+'\'.')
        j += 1
    elif 'nnode' == lower_format_opts[i] :
        sacct_format_opts[j]   = 'NNodes'
        display_format_opts[i] = 'NNodes'
        print('sbill: note: Undocumented field \''+slurm_format_opts[i]+'\' used in --format= option. Change to \''+display_format_opts[i]+'\'.')
        j += 1
    elif 'ncpu' == lower_format_opts[i] :
        sacct_format_opts.pop(j)
        display_format_opts[i] = 'NCPUS'
        print('sbill: note: Undocumented field \''+slurm_format_opts[i]+'\' used in --format= option. Change to \''+display_format_opts[i]+'\'.')
    elif 'cpus' == lower_format_opts[i] :
        sacct_format_opts.pop(j)
        display_format_opts[i] = 'NCPUS'
        print('sbill: note: Undocumented field \''+slurm_format_opts[i]+'\' used in --format= option. Change to \''+display_format_opts[i]+'\'.')
    elif 'cpu' == lower_format_opts[i] :
        sacct_format_opts[j]   = 'CPUTime'
        display_format_opts[i] = 'CPUTime'
        print('sbill: note: Undocumented field \''+slurm_format_opts[i]+'\' used in --format= option. Change to \''+display_format_opts[i]+'\'.')
        j += 1
    elif 'ngpu' == lower_format_opts[i] :
        sacct_format_opts.pop(j)
        display_format_opts[i] = 'NGPUS'
        print('sbill: note: Undocumented field \''+slurm_format_opts[i]+'\' used in --format= option. Change to \''+display_format_opts[i]+'\'.')
    elif 'gpus' == lower_format_opts[i] :
        sacct_format_opts.pop(j)
        display_format_opts[i] = 'NGPUS'
        print('sbill: note: Undocumented field \''+slurm_format_opts[i]+'\' used in --format= option. Change to \''+display_format_opts[i]+'\'.')

    # SLURM fields
    else:
        for k in range(len(lower_sacct_all_format_opts)):
            if lower_sacct_all_format_opts[k] == lower_format_opts[i]:
                sacct_format_opts[j]   = sacct_all_format_opts[k]
                display_format_opts[i] = sacct_all_format_opts[k]
                break
        else:
            print('sbill: warning: Undocumented field \''+slurm_format_opts[i]+'\' used in --format= option.')
        j += 1


# Forcefully add required fields
if not 'JobID' in sacct_format_opts :
    sacct_format_opts.append('JobID')
if sum_by == 'User' and not 'User' in sacct_format_opts :
    sacct_format_opts.append('User')
if field_histogram.lower() in ['nnode','nodes','nnodes','node'] :
    if not 'NNodes' in sacct_format_opts :
        sacct_format_opts.append('NNodes')


# ---- SBILL inquiry SACCT for additional fields

format_opts = ['--format=' + ','.join(sacct_format_opts),'-X','-p','--delimiter=\\','--noheader']
slurm_opts = format_opts + slurm_other_format_opts + slurm_filter_opts + slurm_other_sacct_opts
info = data_from_sacct(slurm_opts, columns=sacct_format_opts, sep='\\')

# Merge to usage
usage["Billing"]  = usage.pop(Treskey[0])
usage["NGPUS"]    = usage.pop(Treskey[1])
usage["AllocRAM"] = usage.pop(Treskey[2])

jobid_list = info['JobID'].copy()
last_index = len(usage['JobID']) -1
for k in list(info.keys()):
    iremain = -1
    for i in range(len(jobid_list)):
        if jobid_list[i] == usage['JobID'][iremain+1] :
            iremain += 1
            if iremain == last_index :
                del info[k][iremain+1:]
                break
        else:
            del info[k][iremain+1]

if len(info['JobID']) == len(usage['JobID']) :
    usage.update(info)
else:
    print('sbill: error: Inconsistent job lists.')
    print('\nPlease capture and report this bug to your system admin and \"https://github.com/SKanoksi/SBILL-SLURM\"')
    exit(1)


# ---- Compute sum_by

if len(sum_by) != 0 :
    tags = list(dict.fromkeys( usage[sum_by] ))  # Remove duplicates
    sumby_results = {}
    for t in tags :
        sumby_results[t] = {}
        sumby_results[t][Service] = 0.
        sumby_results[t][CPUusage] = 0.
        sumby_results[t][GPUusage] = 0.
        sumby_results[t]['NumJob'] = 0
    for i in range(len(usage['JobID'])):
        t = usage[sum_by][i]
        sumby_results[t][Service] += usage[Service][i]
        sumby_results[t][CPUusage] += usage[CPUusage][i]
        sumby_results[t][GPUusage] += usage[GPUusage][i]
        sumby_results[t]['NumJob'] += 1


# ----------- Save to ------------
if csv_outfile != "" :
    csv_value = "%s" + csv_delimiter
    with open(csv_outfile, 'w') as f:
        for k in display_format_opts :
            f.write(csv_value % k)
        f.write("\n")
        for n in range(len(usage[display_format_opts[0]])):
            for k in display_format_opts :
                f.write(csv_value % str(usage[k][n]))
            f.write("\n")
    print('\n*** Job records are saved to \"'+csv_outfile+"\" ***\n")
    print('---------- ---------- ----------')
    is_show_only_summary = True


# ------------ Print ------------

if not is_show_only_summary :

    # 0. Decimal round + Restrict char/string/text length
    PrintFormat = ''
    HeadFormat = ''
    for i in range(len(display_format_opts)):
        name_opt = display_format_opts[i]
        if len_opt[i] < 0 :
            if name_opt == Service :
                decimal = ServiceDecimal
            elif name_opt == CPUusage :
                decimal = CPUusageDecimal
            elif name_opt == GPUusage :
                decimal = GPUusageDecimal
            elif name_opt == BillingUnit :
                decimal = BillingUnitDecimal
            else:
                decimal = -1

            if name_opt == 'State' :
                usage[name_opt] = [ x[:x.find(' ')] if x.find(' ')>0 else x for x in usage[name_opt] ]
                num_char = max([len(x) for x in usage[name_opt]]) + 1
            else:
                if decimal < 0 :
                    num_char = max([len(str(x)) for x in usage[name_opt]]) + 1
                else:
                    try_format = '{:,.' + str(decimal) + 'f}'
                    num_char = max([len(try_format.format(x)) for x in usage[name_opt]]) + 1

            num_char = max([len(name_opt)+1, num_char])
            HeadFormat += '{:>' + str(num_char) + '}|'
            if name_opt == Service or name_opt == CPUusage or name_opt == GPUusage or name_opt == BillingUnit :
                PrintFormat += '{:>' + str(num_char) + ',.' + str(decimal) + 'f}|'
            else:
                PrintFormat += '{:>' + str(num_char) + '}|'
        else:
            if name_opt == Service or name_opt == CPUusage or name_opt == GPUusage or name_opt == BillingUnit :
                try_format = '{:,.' + str(len_opt[i]) + 'f}'
                num_char = max([len(try_format.format(x)) for x in usage[name_opt]]) + 2
                num_char = max([len(name_opt)+1, num_char])
                HeadFormat  += '{:>' + str(num_char) + '}|'
                PrintFormat += '{:>' + str(num_char) + ',.' + str(len_opt[i]) + 'f}|'
            else:
                num_char = max([len(name_opt)+1, len_opt[i]+1])
                HeadFormat  += '{:>' + str(num_char) + '}|'
                PrintFormat += '{:>' + str(num_char) + '}|'
                for nr in range(len(usage['JobID'])):
                    usage[name_opt][nr] = str(usage[name_opt][nr])[0:len_opt[i]]

    HeadFormat = HeadFormat.split('|')
    PrintFormat = PrintFormat.split('|')

    # 1. Print table
    for i in range(len(display_format_opts)):
        print(HeadFormat[i].format(display_format_opts[i]), end='')
    print('')

    for nr in range(len(usage['JobID'])) :
        for i in range(len(display_format_opts)) :
            print(PrintFormat[i].format(usage[display_format_opts[i]][nr]), end='')
        print('')
    print('--------------------------------')

# 2. Print filter info
if len(slurm_filter_opts) != 0 :
    print('Note: SLURM job filter/query options applied: ' + ' '.join(slurm_filter_opts))
if len(state_selected) != 0 or len(reservation_selected) != 0 or len(range_minmax) >= 1 or len(runtime_minmax) >=1 or len(range_ncpu_minmax) >= 2 or len(range_ngpu_minmax) >= 2 :
    if len(slurm_filter_opts) != 0 :
        print('      SBILL job filter/query options applied:', end='')
    else:
        print('Note: SBILL job filter/query options applied:', end='')
    if len(reservation_selected) != 0 :
        print(' --reservation=' + ','.join(reservation_selected), end='')
    if len(state_selected) != 0 :
        print(' --state=' + ','.join(state_selected), end='')
    if len(range_minmax) == 1 :
        print(' --range=' + str(range_minmax[0]), end='')
    elif len(range_minmax) > 1 :
        print(' --range=' + str(range_minmax[0]) + '-' + str(range_minmax[1]), end='')
    if len(runtime_minmax) == 1 :
        print(' --runtime=' + str(runtime_minmax[0]) + ':' + runtime_unit, end='')
    elif len(runtime_minmax) > 1 :
        print(' --runtime=' + str(runtime_minmax[0]) + '-' + str(runtime_minmax[1]) + ':' + runtime_unit, end='')
    if len(range_ncpu_minmax) > 1 :
        if range_ncpu_minmax[0] == range_ncpu_minmax[1] :
            print(' --ncpus=' + str(range_ncpu_minmax[0]), end='')
        else:
            print(' --ncpus=' + str(range_ncpu_minmax[0]) + '-' + str(range_ncpu_minmax[1]), end='')
    if len(range_ngpu_minmax) > 1 :
        if range_ngpu_minmax[0] == range_ngpu_minmax[1] :
            print(' --ngpus=' + str(range_ngpu_minmax[0]), end='')
        else:
            print(' --ngpus=' + str(range_ngpu_minmax[0]) + '-' + str(range_ngpu_minmax[1]), end='')
    print('')
if isRestricted and remove_nonassoc :
    print('\nWarning: Only jobs that are associated with your Slurm billing accounts are shown.')
if trim_jobtime and len(runtime_minmax) != 0 :
    print('\nWarning: Using --runtime= when --truncate (--trim) is set could lead to an imprecise result.')
print('')

# 3. Print total
Format = '{:,.' + str(ServiceDecimal) + 'f}'
try_service = Format.format(Total_SU_spent).split('.')
Format = '{:,.' + str(CPUusageDecimal) + 'f}'
try_cpu = Format.format(Total_CPUusage_obtained).split('.')
Format = '{:,.' + str(GPUusageDecimal) + 'f}'
try_gpu = Format.format(Total_GPUusage_obtained).split('.')
try_job = '{:,}'.format(len(usage['JobID']))

nl_digit = max([len(try_service[0]), len(try_cpu[0]), len(try_gpu[0]), len(try_job)])
nr_digit = max([ServiceDecimal, CPUusageDecimal, GPUusageDecimal])
Format_L = '{:>' + str(nl_digit) + '}'
Format_R = '.{:<' + str(nr_digit) + '}'

print('{:<30}'.format('Total '+Service+' spent '),'= ', end='')
print(Format_L.format(try_service[0]), end='')
if len(try_service) > 1 :
    print(Format_R.format(try_service[1]))
else:
    print('')

print('{:<30}'.format('Total '+CPUusage+' granted '),'= ', end='')
print(Format_L.format(try_cpu[0]), end='')
if len(try_cpu) > 1 :
    print(Format_R.format(try_cpu[1]))
else:
    print('')

print('{:<30}'.format('Total '+GPUusage+' granted '),'= ', end='')
print(Format_L.format(try_gpu[0]), end='')
if len(try_gpu) > 1 :
    print(Format_R.format(try_gpu[1]))
else:
    print('')

print('{:<30}'.format('Total filtered/queried jobs '),'= ', end='')
print(Format_L.format(try_job))
print('')

# 4. Additionally print sum_by
if len(sum_by) != 0 :
    sorted_keys = list(sumby_results.keys())
    sorted_keys.sort()
    num_char = max([len(sum_by), max( [len(x) for x in sorted_keys]  )])
    IndexFormat = '{:>' + str(num_char) + '}'
    print(IndexFormat.format(sum_by), end='')

    Decimal = [ServiceDecimal,CPUusageDecimal,GPUusageDecimal]
    Tag     = [Service,CPUusage,GPUusage]
    Format  = ''
    for T,D in zip(Tag, Decimal) :
        try_format = '{:,.' + str(D) + 'f}'
        num_char = 0
        for k in list(sumby_results.keys()):
            num_char = max([num_char, len(try_format.format(sumby_results[k][T]))])
        num_char = max([ len(T), num_char ]) + 2
        Format += '{:>' + str(num_char) + ',.' + str(D) + 'f}|'
        HeadFormat = '{:>' + str(num_char) + '}'
        print(HeadFormat.format(T), end='')
    print(HeadFormat.format('Filtered jobs'), end='') # Borrow GPUusage
    print('')
    Format = Format.split('|')

    for k in sorted_keys :
        print(IndexFormat.format(k), end='')
        print(Format[0].format(sumby_results[k][Service]), end='')
        print(Format[1].format(sumby_results[k][CPUusage]), end='')
        print(Format[2].format(sumby_results[k][GPUusage]), end='')
        print(HeadFormat.format(sumby_results[k]['NumJob']), end='')
        print('')
    print('')

# 5. Additionally print histogram
if is_show_job_histogram :
    from numpy import histogram as hist
    from math import ceil

    if field_histogram.lower() == Service.lower() :
        field_histogram = Service
        Decimal = ServiceDecimal + 1
    elif field_histogram.lower() == CPUusage.lower() :
        field_histogram = CPUusage
        Decimal = CPUusageDecimal + 1
    elif field_histogram.lower() == GPUusage.lower() :
        field_histogram = GPUusage
        Decimal = GPUusageDecimal + 1
    elif field_histogram.lower() == BillingUnit.lower() :
        field_histogram = BillingUnit
        Decimal = BillingUnitDecimal + 1
    elif field_histogram.lower() in ['nnode','nodes','nnodes','node'] :
        field_histogram = 'NNodes'
        usage[field_histogram] = [ int(value) for value in usage[field_histogram] ]
        Decimal = 1
    elif field_histogram.lower() in ['ncpu','cpus','ncpus','cpu'] :
        field_histogram = 'NCPUS'
        Decimal = 1
    elif field_histogram.lower() in ['ngpu','gpus','ngpus','gpu'] :
        field_histogram = 'NGPUS'
        Decimal = 1
    elif field_histogram.lower() == 'runsec' :
        display_field = 'RunSec'
        field_histogram = 'ElapsedRaw'
        Decimal = 1
    elif field_histogram.lower() == 'runmin' :
        display_field = 'RunMin'
        field_histogram = 'ElapsedRaw'
        Decimal = 1
        usage[field_histogram] = [ float(value)/60.0 for value in usage[field_histogram] ]
    elif field_histogram.lower() == 'runhour' :
        display_field = 'RunHour'
        field_histogram = 'ElapsedRaw'
        Decimal = 1
        usage[field_histogram] = [ float(value)/60.0/60.0 for value in usage[field_histogram] ]
    else:
        print('sbill: error: Unsupported histogram field \''+field_histogram+'\'\nSee \'sbill --help\'')
        exit(1)

    if field_histogram.lower() != 'elapsedraw' :
        display_field = field_histogram

    if field_histogram.lower() == Service.lower() :
        if len(range_minmax) >= 2 :
            hist_range = (range_minmax[0], range_minmax[1])
        elif len(range_minmax) == 1 :
            hist_range = (range_minmax[0], max(usage[field_histogram]))
        else:
            hist_range = (0.0, max(usage[field_histogram]))
    elif field_histogram.lower() == 'ncpus' :
        if len(range_ncpu_minmax) >= 2 :
            hist_range = (range_ncpu_minmax[0], range_ncpu_minmax[1])
        else:
            hist_range = (0, max(usage[field_histogram]))
    elif field_histogram.lower() == 'ngpus' :
        if len(range_ngpu_minmax) >= 2 :
            hist_range = (range_ngpu_minmax[0], range_ngpu_minmax[1])
        else:
            hist_range = (0, max(usage[field_histogram]))
    else:
        hist_range = (0, max(usage[field_histogram]))

    if field_histogram.lower() in ['nnodes','ncpus','ngpus','elapsedraw'] :  # For fields of integer
        int_spacing = int(hist_range[1] - hist_range[0]) + 1
        if int_spacing < nbin_histogram :
            nbin_histogram = int_spacing
            print('sbill: warning: Specified number of bin is too fine for the data --> Readjusting.')

    count, bin_edges = hist(usage[field_histogram], bins=nbin_histogram, range=hist_range)

    try_format = '{:,.'+str(Decimal)+'f}'
    num_char = max( [len(try_format.format(x)) for x in bin_edges] ) + 2
    if num_char < 6 :
        num_char = 6
    Format = '{:>'+str(num_char)+',.'+str(Decimal)+'f} - {:<'+str(num_char)+',.'+str(Decimal)+'f}'
    bin_names = [Format.format(x,y) for x,y in zip(bin_edges[:-1],bin_edges[1:])]
    count = list(count)

    step = ceil(max(count)/45)     # at most 45 stars
    #step = int( ceil(step/NUM)*NUM )  # ceil to nearest multiply of NUM
    label = 'Horizontal bar where each x ~ '+str(int(step))+' jobs or less'
    bar = ['x' * int(ceil(n/step)) if n!=0 else ' ' for n in count]

    Format = '{:^' + str(2*num_char+3) + '}'
    print(Format.format(display_field+' range'), end='')
    Format = '{:>' + str(len(str(max(count)))+2) + '}'
    print(Format.format('Count'), end='')
    print('  '+label, end='')
    print('')

    for j in range(nbin_histogram):
        print(bin_names[j], end='')
        print(Format.format(count[j]), end='')
        print('   '+bar[j], end='')
        print('')

